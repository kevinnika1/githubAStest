name: Python container CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'java', 'javascript', 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        paths: ./pythonwebapp
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
      
  checkov-job:
    runs-on: ubuntu-latest
    name: checkov-action
    steps:
      - name: Checkout repo
        uses: actions/checkout@master
        
      - name: Install everything i need
        run: |
          sudo apt install python3.8
          python --version
          pip install checkov


      - name: run and save checkov output
        run:  |
          checkov -d ./pythonwebapp -o sarif | tee checkovtest.sarif
 
      - name: upload sarif results
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'checkovtest.sarif'
      
  lint_job:
    runs-on: ubuntu-latest
    name: Lint Code Base
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
 # terrascan_job:
 #   runs-on: ubuntu-latest
 #   name: terrascan-action
 #   steps:
 #   - name: Checkout repository
 #     uses: actions/checkout@v2
 ##   - name: Run Terrascan
 #     id: terrascan
#     uses: accurics/terrascan-action@main
 #     with:
 #       iac_type: 'terraform'
 #       iac_version: 'v14'
 #       policy_type: 'aws'
 #       only_warn: true
 #       sarif_upload: true
        #non_recursive:
        #iac_dir:
        #policy_path:
        #skip_rules:
        #config_path:
 #   - name: Upload SARIF file
 #     uses: github/codeql-action/upload-sarif@v1
 #     with:
 #       sarif_file: terrascan.sarif
          
  trivy-build-scan:
    runs-on: ubuntu-latest
    needs: [checkov-job,analyze]
    name: trivy image scanning
    steps:    
    
      - name: Checkout repo
        uses: actions/checkout@v2
        
      - name: Build an image from Dockerfile
        run: |
          docker build ./pythonwebapp --tag flask-demo-container:${{ github.sha }}
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'flask-demo-container:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'
          
  Anchore-Build-Scan:
    runs-on: ubuntu-latest
    name: Anchore image scanning
    needs: [checkov-job,analyze]
    steps:
    
    - name: Checkout repo
      uses: actions/checkout@v2
      
    - name: Build an image from Dockerfile
      run: |
          docker build ./pythonwebapp --tag flask-demo-container:${{ github.sha }}
  
    - name: Run the Anchore scan action itself with GitHub Advanced Security code scanning integration enabled
      uses: anchore/scan-action@main
      with:
        image: "flask-demo-container:${{ github.sha }}"
        acs-report-enable: true
        
    - name: Upload Anchore Scan Report
      if: ${{ always() }}
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: results.sarif
        
  Push-image: 
    runs-on: ubuntu-latest
    name: push image to ecr
    needs: trivy-build-scan
    steps:    
      - name: Build an image from Dockerfile
        run: echo "push to ecr"
        
  Deploy-image: 
    runs-on: ubuntu-latest
    name: deploy image in ecr to eks
    needs: Push-image
    steps:    
      - name: Build an image from Dockerfile
        run: echo "deploy ecr image in eks or trigger code pipeline to do so"
          
          
        
        
